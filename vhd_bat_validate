#!/usr/bin/python

#    (c) Selectel, 2013
#    by George Shuklin
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''
    validates VHD Block Allocation Table and reports bad blocks
'''

import sys, os
import argparse
import struct

VERSION = 'vhd-validate 1.0'

class P():
    def __init__(self,visible):
        self.visible=visible

    def __call__(self, message=""):
        if self.visible:
                print message

def overlap(a, b): #http://stackoverflow.com/questions/2953967/built-in-function-for-computing-overlap-in-python
    return max(0, min(a[1], b[1]) - max(a[0], b[0]))


def block_overlap(block_list,block_start,block_size):
    '''
        return overlapping if block_start+block_size overlap with any value in block_list (+block_size) or return False
    '''
    for b in block_list:
        if overlap((b,b+block_size), (block_start,block_start+block_size)):
            return b
    return False

def vhd_bat_validate(fd,stat,offset,entries,debug,verbose):
    '''
        return table of valid bat entries
    '''
    beyond_count=0
    duplicate_count=0
    overlap_count=0
    empty_count=0
    error_count=0
    block_list=list()
    for e in xrange(0,entries):
        os.lseek(fd,offset+e*4,os.SEEK_SET)
        try:
            block_start=struct.unpack("!I",os.read(fd,4))[0]
        except:
            print "failed to read entry %i from offset %i"%(e,offset+e*4)
            error_count+=1
        if block_start==0xFFFFFFFF: #empty block
            debug("[NOOP] entry %i is empty"%(block_start))
            empty_count+=1
        elif block_start*512>stat.st_size:
            print "[GONE] entry %i points to sector %i (block offset in file %i). It is completely beyond file end (%i). BAT is corrupted or file truncated."%(e,block_start,block_start*512,stat.st_size)
            beyond_count+=1
        elif (block_start+4096+1)*512 >stat.st_size: #4096 sectors - default block size, 1 sector - bitmap
            print "[BAD ] entry %i poinst to sector %i (block offset in file %i) with block size %i. It partially beyond file end (%i). BAT is corrupted or file truncated. If VHD footer is present, block missing %i bytes"%(e,block_start,block_start*512,(4096+1)*512,stat.st_size,(block_start+4096+1)*512-stat.st_size) #+1 - VHD footer
            beyond_count+=1
        elif (block_start+4096+2)*512 >stat.st_size: #VHD has footer (512 bytes) - if that footer is missing, file is somehow damaged
            print "[WARN] entry %i poinst to sector %i (block offset in file %i) with block size %i. It fit completely in the file, but there is no space left after block in file (512 bytes for VHD footer). This can be because of file truncation or some strange error. Not counting this case as error, because BAT valid"%(e,block_start,block_start*512)
        elif block_start in block_list:
            print "[BAD ] entry %i is duplicate, pointing to %i"%(e,block_start)
            duplicate_count+=1;
        elif block_overlap(block_list,block_start,(4096+8)): #note, blocks are checking with sector_count, not bytes (no '*512')
            print "[BAD ] entry %i is overlapping with other region ponting to %i, overlapping with %i pointed by previos BAT entry"%(e,block_start,block_overlap(block_list,block_start,(4096+8))) #in citrix environment every block (except last) has 3854 bytes-padding at the end. They should not overlap with other blocks.
        else:
            block_list.append(block_start);
            debug("[good] entry %i points to sector %i (offset=%i) with block size %i. It is within file borders."%(e,block_start,block_start*512,(4096+1)*512))
    if beyond_count or duplicate_count or overlap_count or error_count:
            print "\nBlock Allocation Table (BAT) contains ERRORS!"
    else:
        verbose("\nBAT is fine")
    verbose("Statistic (BAT):")
    verbose("Total blocks:\t%i"%entries)
    verbose("Error read BAT:\t%i"%error_count)
    verbose("Empty blocks:\t%i"%empty_count)
    verbose("Beyond file:\t%i"%beyond_count)
    verbose("Duplicates:\t%i"%duplicate_count)
    verbose("Overlappings:\t%i"%overlap_count)
    return block_list

def vhd_process(vhd,bat,mte,batsize,full,debug,verbose):
    debug=P(debug)
    verbose=P(verbose)
    stat=os.stat(vhd)
    debug("stats for %s is %s" %(vhd,str(stat)))
    if full:
        pass
    if not batsize:
        if stat.st_size<mte:
                print "MTE (%i) is beyond file end (size=%i)"%(mte,stat.st_size)
                return
        fd=os.open(vhd,os.O_RDONLY|os.O_NONBLOCK)
        debug("file %s opened as fd %i"%(vhd,fd))
        os.lseek(fd,mte,os.SEEK_SET)
        entries=struct.unpack("!I",os.read(fd,4))[0]
        debug("Got MTE value from offset %x: %i"%(mte,entries))
        debug("assuming block size to 2MiB, payload (disk size) is %i=%iMiB"%(entries*2*1024*1024, entries*2))
    else:
        entries=batsize
        debug("BAT size forced to %i, ignoring value in the VHD file.  Blocksize is 2MiB, payload is %i (%iMiB)"%(entries,entries*2*1024*1024,entries*2))
    if entries > 8388607: #(max_uint4/512-1)
        print "MTE (%i) is larger than BAT can holds (%i): Either MTE is wrong, or BAT contains duplicate entries. Will continue the check..."%(entries,8388607)
    if stat.st_size < bat:
        print "BAT is completely beyond file end (expected placement: %i, file size: %i). Nothing to do, exiting"%(bat,stat.st_size)
        return
    if stat.st_size < bat+entries*4: # 4 - size of each entry in BAT
        print "BAT is partially beyond file end (BAT offset is %i, BAT size is %i, file size %i), but will continue to validate leftovers."%(bat,entries*4,stat.st_size)
    block_list=vhd_bat_validate(fd,stat,bat,entries,debug,verbose)
    os.close(fd)
    

def main():
    parser=argparse.ArgumentParser()
    parser.add_argument("vhd_file", help="Path to VHD file, f.e. ~/d5f498d7-6e15-4c39-98d2-4d0c42cc6d3d.vhd")
    parser.add_argument("-v", "--verbosity", help="increase output verbosity", action="store_true")
    parser.add_argument("-d", "--debug", help="put junk on screen", action="store_true")
    parser.add_argument("--bat", help="change default (0x600) BAT location, in hex", default="0x600")
    parser.add_argument("--mte", help="change default MTE field location, in hex", default="0x21C")
    parser.add_argument("--batsize", help="force  BAT size (override MTE filed in Dynamic Header), count in entries, hex", default='0')
    args = parser.parse_args() 
    try:
        bat=int(args.bat,base=16)
    except:
        print "Bad offset format (%s), expecting hex (0x600)\n"%(args.bat)
        sys.exit(-1)

    try:
        mte=int(args.mte,base=16)
    except:
        print "Bat MTE format (%s), expecting hex (0x21C)\n"%(args.mte)
        sys.exit(-1)
    try:
        batsize=int(args.batsize,base=16)
    except:
        print "Bat batsize format (%s), expecting hex (f.e. 0x1FF)\n"%(args.batsize)
    vhd_process(args.vhd_file, bat,mte,batsize,args.full,args.debug, args.verbosity)

if __name__ == "__main__":
    main()
